{"version":3,"file":"static/js/853.ae14af14.chunk.js","mappings":"yNA0DA,UAtDe,WACb,OAAuBA,EAAAA,EAAAA,WAAS,GAAvBC,GAAT,eACA,GAAqBD,EAAAA,EAAAA,WAAS,GAArBE,GAAT,eACA,GAA6BF,EAAAA,EAAAA,UAAS,IAAtC,eAAOG,EAAP,KAAgBC,EAAhB,KACAC,QAAQC,IAAIH,GAEZ,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QA2BR,OA1BAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,oGAEIV,GAAW,GACXC,GAAS,GAHb,UAIgCU,EAAAA,EAAAA,IAAYL,EAAS,CAC/CM,OAAQH,EAAWG,SALzB,OAIUC,EAJV,OAQIV,EAAUU,EAAcC,SAR5B,gDAUuB,iBAAf,KAAMC,MACRd,GAAS,GAXf,yBAcID,GAAW,GAdf,6EAHc,sBAqBd,OArBc,mCAoBdgB,GACO,WACLP,EAAWQ,OACZ,CACF,GAAE,CAACX,KAGF,yBACGJ,EAAQgB,OAAS,GAChB,wBACGhB,EAAQiB,KAAI,SAAAC,GACX,IAAQC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,OACjB,OACE,2BACE,wBAAKA,KACL,uBAAID,MAFGC,EAKZ,OAGH,uBAAG,yCAIV,C,8LCtDKC,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,IAAKF,GAKA,IAAMG,EAAmB,mCAAG,yGAAOC,EAAP,+BAAgB,CAAC,EAAjB,SACVH,EAAAA,EAAAA,IAAA,sCACUD,GAC/BI,GAH+B,cAC3BC,EAD2B,yBAK1BA,EAASC,MALiB,2CAAH,qDAUnBC,EAAe,mCAAG,WAAOxB,GAAP,4FAAgBqB,EAAhB,+BAAyB,CAAC,EAA1B,SACNH,EAAAA,EAAAA,IAAA,iBACXlB,EADW,oBACQiB,GAC7BI,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,sDAUfE,EAAkB,mCAAG,WAAOC,GAAP,4FAAcL,EAAd,+BAAuB,CAAC,EAAxB,SACTH,EAAAA,EAAAA,IAAA,8BACEQ,EADF,oBACmBT,GACxCI,GAH8B,cAC1BC,EAD0B,yBAKzBA,EAASC,MALgB,2CAAH,sDAUlBlB,EAAW,mCAAG,WAAOL,GAAP,4FAAgBqB,EAAhB,+BAAyB,CAAC,EAA1B,SACFH,EAAAA,EAAAA,IAAA,iBACXlB,EADW,4BACgBiB,GACrCI,GAHuB,cACnBC,EADmB,yBAKlBA,EAASC,MALS,2CAAH,sDAUXI,EAAS,mCAAG,WAAO3B,GAAP,4FAAgBqB,EAAhB,+BAAyB,CAAC,EAA1B,SACAH,EAAAA,EAAAA,IAAA,iBACXlB,EADW,4BACgBiB,GACrCI,GAHqB,cACjBC,EADiB,yBAKhBA,EAASC,MALO,2CAAH,qD","sources":["components/Review.js","utils/Api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReview } from '../utils/Api';\n\nconst Review = () => {\n  const [, setLoading] = useState(false);\n  const [, setError] = useState(false);\n  const [reviews, setReview] = useState([]);\n  console.log(reviews);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getReview() {\n      try {\n        setLoading(true);\n        setError(false);\n        const fetchedReview = await fetchReview(movieId, {\n          signal: controller.signal,\n        });\n\n        setReview(fetchedReview.results);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(true);\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n    getReview();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => {\n            const { content, author } = review;\n            return (\n              <li key={author}>\n                <h2>{author}</h2>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>There are no reviews for this movie</p>\n      )}\n    </div>\n  );\n};\n\nexport default Review;\n","import axios from 'axios';\n\nconst API_KEY = '3dcf7f9df138daa52451d10b15111f4e';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  key: API_KEY,\n};\n\n// trending movies search for Home page\n\nexport const fetchTrandingMovies = async (params = {}) => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// movie by ID\n\nexport const fetchMoviesById = async (movieId, params = {}) => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// movies for Movies page\n\nexport const fetchMoviesByQuery = async (value, params = {}) => {\n  const response = await axios.get(\n    `/search/movie?query=${value}&api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// fetch for review\n\nexport const fetchReview = async (movieId, params = {}) => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// fetch for cast\n\nexport const fetchCast = async (movieId, params = {}) => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n"],"names":["useState","setLoading","setError","reviews","setReview","console","log","movieId","useParams","useEffect","controller","AbortController","fetchReview","signal","fetchedReview","results","code","getReview","abort","length","map","review","content","author","API_KEY","axios","key","fetchTrandingMovies","params","response","data","fetchMoviesById","fetchMoviesByQuery","value","fetchCast"],"sourceRoot":""}