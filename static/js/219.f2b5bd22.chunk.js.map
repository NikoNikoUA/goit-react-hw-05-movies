{"version":3,"file":"static/js/219.f2b5bd22.chunk.js","mappings":"0SAEaA,EAAOC,EAAAA,GAAAA,GAAH,+OAaJC,EAAWD,EAAAA,GAAAA,GAAH,6QAcRE,EAAUF,EAAAA,GAAAA,GAAH,gEAKPG,EAAgBH,EAAAA,GAAAA,EAAH,iE,mBC4C1B,EAtEa,WACX,OAA8BI,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QA8BR,OA1BAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,oGAEIT,GAAW,GACXE,GAAS,GAHb,UAI8BQ,EAAAA,EAAAA,GAAUL,EAAS,CAC3CM,OAAQH,EAAWG,SALzB,OAIUC,EAJV,OAQIR,EAAQQ,EAAYT,MARxB,gDAUuB,iBAAf,KAAMU,MACRX,GAAS,GAXf,yBAcIF,GAAW,GAdf,6EAHc,sBAqBd,OArBc,mCAoBdc,GACO,WACLN,EAAWO,OACZ,CACF,GAAE,CAACV,KAGF,2BACGN,IAAW,SAACiB,EAAA,EAAD,IACXf,GACCgB,EAAAA,GAAAA,MAAA,wDACDd,EAAKe,OAAS,GACb,SAACzB,EAAD,UACGU,EAAKgB,KAAI,SAAAC,GACR,IAAQC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,UAAWC,EAAiBH,EAAjBG,aACzB,OACE,UAAC5B,EAAD,YACE,gBACE6B,IACED,EAAY,UA1CP,mCA0CO,OACYA,GAzCxC,8EA4CcE,IAAKJ,EACLK,MAAM,MACN3B,QAAQ,UAEV,SAACH,EAAD,UAAUyB,KACV,UAACxB,EAAD,WAAe,cAAYyB,OAZdD,EAelB,OAGH,uBAAG,qDAEL,SAAC,KAAD,CAAgBM,UAAW,IAAMC,MAAM,cAG5C,C,gMC1EKC,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,IAAKF,GAKA,IAAMG,EAAmB,mCAAG,yGAAOC,EAAP,+BAAgB,CAAC,EAAjB,SACVH,EAAAA,EAAAA,IAAA,sCACUD,GAC/BI,GAH+B,cAC3BC,EAD2B,yBAK1BA,EAASC,MALiB,2CAAH,qDAUnBC,EAAe,mCAAG,WAAO/B,GAAP,4FAAgB4B,EAAhB,+BAAyB,CAAC,EAA1B,SACNH,EAAAA,EAAAA,IAAA,iBACXzB,EADW,oBACQwB,GAC7BI,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,sDAUfE,EAAkB,mCAAG,WAAOC,GAAP,4FAAcL,EAAd,+BAAuB,CAAC,EAAxB,SACTH,EAAAA,EAAAA,IAAA,8BACEQ,EADF,oBACmBT,GACxCI,GAH8B,cAC1BC,EAD0B,yBAKzBA,EAASC,MALgB,2CAAH,sDAUlBI,EAAW,mCAAG,WAAOlC,GAAP,4FAAgB4B,EAAhB,+BAAyB,CAAC,EAA1B,SACFH,EAAAA,EAAAA,IAAA,iBACXzB,EADW,4BACgBwB,GACrCI,GAHuB,cACnBC,EADmB,yBAKlBA,EAASC,MALS,2CAAH,sDAUXzB,EAAS,mCAAG,WAAOL,GAAP,4FAAgB4B,EAAhB,+BAAyB,CAAC,EAA1B,SACAH,EAAAA,EAAAA,IAAA,iBACXzB,EADW,4BACgBwB,GACrCI,GAHqB,cACjBC,EADiB,yBAKhBA,EAASC,MALO,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","utils/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  width: 1000px;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  border: 1px solid white;\n  border-radius: 8px;\n  padding: 40px 15px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  box-shadow: 0px 0px 4px black;\n  padding: 15px;\n  width: 150px;\n  height: 265px;\n`;\n\nexport const Heading = styled.h3`\n  color: white;\n  text-align: center;\n`;\n\nexport const CharacterInfo = styled.p`\n  color: orange;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../../utils/Api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { List, ListItem, Heading, CharacterInfo } from './Cast.styled';\nimport Loader from '../Loader/Loader';\n\nconst Cast = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [cast, setCast] = useState([]);\n\n  const { movieId } = useParams();\n  const posterBasePath = 'https://image.tmdb.org/t/p/w500';\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getReview() {\n      try {\n        setLoading(true);\n        setError(false);\n        const fetchedCast = await fetchCast(movieId, {\n          signal: controller.signal,\n        });\n\n        setCast(fetchedCast.cast);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(true);\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n    getReview();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {error &&\n        toast.error(`Whoops, something went wrong. Try reloading the page`)}\n      {cast.length > 0 ? (\n        <List>\n          {cast.map(actor => {\n            const { name, character, profile_path } = actor;\n            return (\n              <ListItem key={name}>\n                <img\n                  src={\n                    profile_path\n                      ? `${posterBasePath}${profile_path}`\n                      : defaultImg\n                  }\n                  alt={name}\n                  width=\"100\"\n                  loading=\"lazy\"\n                />\n                <Heading>{name}</Heading>\n                <CharacterInfo>Character: {character}</CharacterInfo>\n              </ListItem>\n            );\n          })}\n        </List>\n      ) : (\n        <p>There is not information on cast for this movie</p>\n      )}\n      <ToastContainer autoClose={4000} theme=\"colored\" />\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '3dcf7f9df138daa52451d10b15111f4e';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  key: API_KEY,\n};\n\n// trending movies search for Home page\n\nexport const fetchTrandingMovies = async (params = {}) => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// movie by ID\n\nexport const fetchMoviesById = async (movieId, params = {}) => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// movies for Movies page\n\nexport const fetchMoviesByQuery = async (value, params = {}) => {\n  const response = await axios.get(\n    `/search/movie?query=${value}&api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// fetch for review\n\nexport const fetchReview = async (movieId, params = {}) => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n\n// fetch for cast\n\nexport const fetchCast = async (movieId, params = {}) => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`,\n    params\n  );\n  return response.data;\n};\n"],"names":["List","styled","ListItem","Heading","CharacterInfo","useState","loading","setLoading","error","setError","cast","setCast","movieId","useParams","useEffect","controller","AbortController","fetchCast","signal","fetchedCast","code","getReview","abort","Loader","toast","length","map","actor","name","character","profile_path","src","alt","width","autoClose","theme","API_KEY","axios","key","fetchTrandingMovies","params","response","data","fetchMoviesById","fetchMoviesByQuery","value","fetchReview"],"sourceRoot":""}